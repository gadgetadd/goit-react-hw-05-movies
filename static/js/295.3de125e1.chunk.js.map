{"version":3,"file":"static/js/295.3de125e1.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","helpers/normalize.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 20px auto;\n  padding: 0;\n`;\nexport const Item = styled.li`\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px 0px;\n  display: flex;\n  font-size: 24px;\n  gap: 20px;\n  max-width: 600px;\n  margin: 10px auto;\n`;\n\nexport const Name = styled.p`\n  margin: 0;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\nexport const Character = styled.p`\n  margin: 0;\n  font-size: 14px;\n`;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'services/api';\nimport { Item, List, Name, Character } from './Cast.styled';\nimport { Fallback } from 'components/Fallback/Fallback.styled';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const isEmpty = cast?.length === 0;\n  const isLoaded = cast !== null;\n\n  const hadleFetchCast = useCallback(async () => {\n    const response = await API.cast(movieId);\n    setCast(response);\n  }, [movieId]);\n\n  useEffect(() => {\n    hadleFetchCast();\n  }, [hadleFetchCast]);\n\n  return (\n    <List>\n      {!isLoaded && <Fallback>Loading</Fallback>}\n      {isLoaded && isEmpty && (\n        <Item>Sorry, there is no information about the cast</Item>\n      )}\n      {isLoaded &&\n        !isEmpty &&\n        cast.map(cast => (\n          <Item key={cast.id}>\n            <img src={cast.photo} alt={cast.name} />\n            <div>\n              <Name>{cast.name}</Name>\n              <Character>{cast.character}</Character>\n            </div>\n          </Item>\n        ))}\n    </List>\n  );\n}\n","import previewPlaceholder from 'images/preview-placeholder.png'\nimport castPlaceholder from 'images/cast-placeholder.jpg'\nimport detailsPlaceholder from 'images/details-placeholder.jpg'\n\nconst base_url = \"https://image.tmdb.org/t/p/\";\n// const backdrop_sizes = ['w300', 'w780', 'w1280', 'original'];\n// const logo_sizes = ['w45', 'w92', 'w154', 'w185', 'w300', 'w500', 'original'];\nconst poster_sizes = ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'];\nconst profile_sizes = ['w45', 'w185', 'h632', 'original'];\n\nconst forList = (data) => data.results.map(movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : previewPlaceholder,\n    id: movie.id,\n}))\n\nconst forDetails = movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : detailsPlaceholder,\n    year: new Date(movie.release_date).getFullYear(),\n    userScore: movie.vote_average !== 0.0 ? `${Math.floor(movie.vote_average * 10)}%` : 'no ratings yet',\n    overview: movie.overview,\n    genres: movie.genres.map(genre => genre.name).join(', ')\n})\n\nconst forCast = movie => movie.cast.map(actor => ({\n    id: actor.id,\n    photo: actor.profile_path ? base_url + profile_sizes[0] + actor.profile_path : castPlaceholder,\n    name: actor.name,\n    character: actor.character,\n})).filter(actor => !actor.character.includes('uncredited'))\n\nconst forReviews = data => data.results.map(review => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n}))\n\n\nconst normalize = { forList, forDetails, forCast, forReviews };\n\nexport default normalize;","import axios from \"axios\"\nimport normalize from \"helpers/normalize\";\n\n\nconst movieDB = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: { api_key: '2b43cfeb8fadffb304d7dda7b2d5a230' }\n});\n\nconst popular = async () => {\n    const response = await movieDB.get('trending/movie/week');\n    return normalize.forList(response.data);\n};\n\nconst search = async (query) => {\n    const response = await movieDB.get('search/movie', { params: { query } });\n    return normalize.forList(response.data);\n};\n\nconst details = async (id) => {\n    const response = await movieDB.get(`movie/${id}`);\n    return normalize.forDetails(response.data);\n};\n\nconst cast = async (id) => {\n    const response = await movieDB.get(`movie/${id}/credits`);\n    return normalize.forCast(response.data);\n};\n\nconst reviews = async (id) => {\n    const response = await movieDB.get(`movie/${id}/reviews`);\n    return normalize.forReviews(response.data);\n};\n\nconst API = {\n    popular, search, details, cast, reviews\n}\n\nexport default API;\n"],"names":["List","styled","Item","Name","Character","Cast","movieId","useParams","useState","cast","setCast","isEmpty","length","isLoaded","hadleFetchCast","useCallback","API","response","useEffect","map","src","photo","alt","name","character","id","base_url","poster_sizes","profile_sizes","forList","data","results","movie","title","poster","poster_path","forDetails","detailsPlaceholder","year","Date","release_date","getFullYear","userScore","vote_average","Math","floor","overview","genres","genre","join","forCast","actor","profile_path","filter","includes","forReviews","review","author","content","movieDB","axios","baseURL","params","api_key","popular","get","normalize","search","query","details","reviews"],"sourceRoot":""}