{"version":3,"file":"static/js/48.f05f6d07.chunk.js","mappings":"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","sources":["components/MovieListItem/MovieListItem.styled.jsx","components/MovieListItem/MovieListItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/PageTitle/PageTitle.styled.jsx","components/PageTitle/PageTitle.jsx","pages/Home.jsx","helpers/normalize.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Item = styled.li`\n  display: flex;\n  width: 235px;\n  border-radius: 5px;\n  overflow: hidden;\n  transition: box-shadow 300ms ease-in-out;\n  box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n\n  :hover {\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 28px,\n      rgba(0, 0, 0, 0.22) 0px 10px 10px;\n  }\n`;\n\nexport const Title = styled.p`\n  padding: 12px;\n  color: #0f0f0f;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { Item, Title, MovieLink } from './MovieListItem.styled';\n\nexport default function MovieListItem({ title, poster, id }) {\n  const location = useLocation();\n\n  return (\n    <Item>\n      <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n        <img src={poster} alt={title} />\n        <Title>{title}</Title>\n      </MovieLink>\n    </Item>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n","import MovieListItem from 'components/MovieListItem/MovieListItem';\nimport { List } from './MoviesList.styled';\n\nexport default function MovieList({ movies }) {\n  return (\n    <List>\n      {movies.map(movie => (\n        <MovieListItem\n          key={movie.id}\n          id={movie.id}\n          title={movie.title}\n          poster={movie.poster}\n        ></MovieListItem>\n      ))}\n    </List>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  font-size: 36px;\n  margin: 20px;\n  text-align: center;\n  \n`;\n","import { Title } from \"./PageTitle.styled\"\n\nexport default function PageTitle({ title }) {\n    return <Title>{ title}</Title>\n}","import { useState, useEffect, useCallback } from 'react';\nimport MovieList from 'components/MoviesList/MoviesList';\nimport PageTitle from 'components/PageTitle/PageTitle';\nimport API from 'services/api';\n\nexport default function Home() {\n  const [movies, setMovies] = useState([]);\n\n  const hadleFetchPopular = useCallback(async () => {\n    const response = await API.popular();\n    setMovies(response);\n  }, []);\n\n  useEffect(() => {\n    hadleFetchPopular();\n  }, [hadleFetchPopular]);\n\n  return (\n    <>\n      <PageTitle title={'Trending now'} />\n      <MovieList movies={movies} />\n    </>\n  );\n}\n","import previewPlaceholder from 'images/preview-placeholder.png'\nimport castPlaceholder from 'images/cast-placeholder.jpg'\nimport detailsPlaceholder from 'images/details-placeholder.jpg'\n\nconst base_url = \"https://image.tmdb.org/t/p/\";\n// const backdrop_sizes = ['w300', 'w780', 'w1280', 'original'];\n// const logo_sizes = ['w45', 'w92', 'w154', 'w185', 'w300', 'w500', 'original'];\nconst poster_sizes = ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'];\nconst profile_sizes = ['w45', 'w185', 'h632', 'original'];\n\nconst forList = (data) => data.results.map(movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : previewPlaceholder,\n    id: movie.id,\n}))\n\nconst forDetails = movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : detailsPlaceholder,\n    year: new Date(movie.release_date).getFullYear(),\n    userScore: movie.vote_average !== 0.0 ? `${Math.floor(movie.vote_average * 10)}%` : 'no ratings yet',\n    overview: movie.overview,\n    genres: movie.genres.map(genre => genre.name).join(', ')\n})\n\nconst forCast = movie => movie.cast.map(actor => ({\n    id: actor.id,\n    photo: actor.profile_path ? base_url + profile_sizes[0] + actor.profile_path : castPlaceholder,\n    name: actor.name,\n    character: actor.character,\n})).filter(actor => !actor.character.includes('uncredited'))\n\nconst forReviews = data => data.results.map(review => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n}))\n\n\nconst normalize = { forList, forDetails, forCast, forReviews };\n\nexport default normalize;","import axios from \"axios\"\nimport normalize from \"helpers/normalize\";\n\n\nconst movieDB = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: { api_key: '2b43cfeb8fadffb304d7dda7b2d5a230' }\n});\n\nconst popular = async () => {\n    const response = await movieDB.get('trending/movie/week');\n    return normalize.forList(response.data);\n};\n\nconst search = async (query) => {\n    const response = await movieDB.get('search/movie', { params: { query } });\n    return normalize.forList(response.data);\n};\n\nconst details = async (id) => {\n    const response = await movieDB.get(`movie/${id}`);\n    return normalize.forDetails(response.data);\n};\n\nconst cast = async (id) => {\n    const response = await movieDB.get(`movie/${id}/credits`);\n    return normalize.forCast(response.data);\n};\n\nconst reviews = async (id) => {\n    const response = await movieDB.get(`movie/${id}/reviews`);\n    return normalize.forReviews(response.data);\n};\n\nconst API = {\n    popular, search, details, cast, reviews\n}\n\nexport default API;\n"],"names":["Item","styled","Title","MovieLink","Link","MovieListItem","title","poster","id","location","useLocation","to","state","from","src","alt","List","MovieList","movies","map","movie","PageTitle","Home","useState","setMovies","hadleFetchPopular","useCallback","API","response","useEffect","base_url","poster_sizes","profile_sizes","forList","data","results","poster_path","forDetails","detailsPlaceholder","year","Date","release_date","getFullYear","userScore","vote_average","Math","floor","overview","genres","genre","name","join","forCast","cast","actor","photo","profile_path","character","filter","includes","forReviews","review","author","content","movieDB","axios","baseURL","params","api_key","popular","get","normalize","search","query","details","reviews"],"sourceRoot":""}