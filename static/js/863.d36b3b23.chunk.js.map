{"version":3,"file":"static/js/863.d36b3b23.chunk.js","mappings":"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","sources":["components/MovieListItem/MovieListItem.styled.jsx","components/MovieListItem/MovieListItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/PageTitle/PageTitle.styled.jsx","components/PageTitle/PageTitle.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","helpers/normalize.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Item = styled.li`\n  display: flex;\n  width: 235px;\n  border-radius: 5px;\n  overflow: hidden;\n  transition: box-shadow 300ms ease-in-out;\n  box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n\n  :hover {\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 28px,\n      rgba(0, 0, 0, 0.22) 0px 10px 10px;\n  }\n`;\n\nexport const Title = styled.p`\n  padding: 12px;\n  color: #0f0f0f;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { Item, Title, MovieLink } from './MovieListItem.styled';\n\nexport default function MovieListItem({ title, poster, id }) {\n  const location = useLocation();\n\n  return (\n    <Item>\n      <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n        <img src={poster} alt={title} />\n        <Title>{title}</Title>\n      </MovieLink>\n    </Item>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n","import MovieListItem from 'components/MovieListItem/MovieListItem';\nimport { List } from './MoviesList.styled';\n\nexport default function MovieList({ movies }) {\n  return (\n    <List>\n      {movies.map(movie => (\n        <MovieListItem\n          key={movie.id}\n          id={movie.id}\n          title={movie.title}\n          poster={movie.poster}\n        ></MovieListItem>\n      ))}\n    </List>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  font-size: 36px;\n  margin: 20px;\n  text-align: center;\n  \n`;\n","import { Title } from \"./PageTitle.styled\"\n\nexport default function PageTitle({ title }) {\n    return <Title>{ title}</Title>\n}","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  position: relative;\n  text-align: center;\n  width: 280px;\n  margin: 0 auto 36px;\n`;\n\nexport const Input = styled.input`\n  height: 36px;\n  width: 100%;\n  padding: 5px 10px;\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  top: 2px;\n  right: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n`;\nexport const Alert = styled.span`\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 40px;\n  color: #a73e1ec8;\n`;\n","import { useFormik } from 'formik';\nimport { Form, Input, Button, Alert } from './SearchForm.styled';\nimport { HiOutlineSearchCircle } from 'react-icons/hi';\n\nconst validate = values => {\n  const errors = {};\n  if (!values.search) {\n    errors.search = 'Please, enter your search query';\n  } else if (values.search.length > 30) {\n    errors.search = 'Must be 30 characters or less';\n  }\n\n  return errors;\n};\n\nexport default function SearchForm({ onSubmit }) {\n  const formik = useFormik({\n    initialValues: {\n      search: '',\n    },\n    validate,\n    onSubmit: values => {\n      if (values.search === '') return;\n      onSubmit(values.search);\n    },\n  });\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <Input\n        name=\"search\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        value={formik.values.search}\n        placeholder=\"Search\"\n      />\n      {formik.errors.search ? <Alert>{formik.errors.search}</Alert> : null}\n      <Button type=\"submit\">\n        <HiOutlineSearchCircle size=\"30px\" color=\"#18272fbb\" />\n      </Button>\n    </Form>\n  );\n}\n","import SearchForm from 'components/SearchForm/SearchForm';\nimport MovieList from 'components/MoviesList/MoviesList';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport API from 'services/api';\nimport PageTitle from 'components/PageTitle/PageTitle';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const search = searchParams.get('q') ?? '';\n\n  const handleSubmit = query => {\n    setSearchParams({ q: query.trim().toLowerCase() });\n  };\n\n  const hadleFetchSearch = useCallback(async () => {\n    const response = await API.search(search);\n    setMovies(response);\n  }, [search]);\n\n  useEffect(() => {\n    hadleFetchSearch();\n  }, [hadleFetchSearch]);\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSubmit}></SearchForm>\n      {search && (\n        <>\n          <PageTitle title={`Search results for \"${search}\"`} />\n          <MovieList movies={movies}></MovieList>\n        </>\n      )}\n    </>\n  );\n}\n","import previewPlaceholder from 'images/preview-placeholder.png'\nimport castPlaceholder from 'images/cast-placeholder.jpg'\nimport detailsPlaceholder from 'images/details-placeholder.jpg'\n\nconst base_url = \"https://image.tmdb.org/t/p/\";\n// const backdrop_sizes = ['w300', 'w780', 'w1280', 'original'];\n// const logo_sizes = ['w45', 'w92', 'w154', 'w185', 'w300', 'w500', 'original'];\nconst poster_sizes = ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'];\nconst profile_sizes = ['w45', 'w185', 'h632', 'original'];\n\nconst forList = (data) => data.results.map(movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : previewPlaceholder,\n    id: movie.id,\n}))\n\nconst forDetails = movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : detailsPlaceholder,\n    year: new Date(movie.release_date).getFullYear(),\n    userScore: movie.vote_average !== 0.0 ? `${Math.floor(movie.vote_average * 10)}%` : 'no ratings yet',\n    overview: movie.overview,\n    genres: movie.genres.map(genre => genre.name).join(', ')\n})\n\nconst forCast = movie => movie.cast.map(actor => ({\n    id: actor.id,\n    photo: actor.profile_path ? base_url + profile_sizes[0] + actor.profile_path : castPlaceholder,\n    name: actor.name,\n    character: actor.character,\n})).filter(actor => !actor.character.includes('uncredited'))\n\nconst forReviews = data => data.results.map(review => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n}))\n\n\nconst normalize = { forList, forDetails, forCast, forReviews };\n\nexport default normalize;","import axios from \"axios\"\nimport normalize from \"helpers/normalize\";\n\n\nconst movieDB = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: { api_key: '2b43cfeb8fadffb304d7dda7b2d5a230' }\n});\n\nconst popular = async () => {\n    const response = await movieDB.get('trending/movie/week');\n    return normalize.forList(response.data);\n};\n\nconst search = async (query) => {\n    const response = await movieDB.get('search/movie', { params: { query } });\n    return normalize.forList(response.data);\n};\n\nconst details = async (id) => {\n    const response = await movieDB.get(`movie/${id}`);\n    return normalize.forDetails(response.data);\n};\n\nconst cast = async (id) => {\n    const response = await movieDB.get(`movie/${id}/credits`);\n    return normalize.forCast(response.data);\n};\n\nconst reviews = async (id) => {\n    const response = await movieDB.get(`movie/${id}/reviews`);\n    return normalize.forReviews(response.data);\n};\n\nconst API = {\n    popular, search, details, cast, reviews\n}\n\nexport default API;\n"],"names":["Item","styled","Title","MovieLink","Link","MovieListItem","title","poster","id","location","useLocation","to","state","from","src","alt","List","MovieList","movies","map","movie","PageTitle","Form","Input","Button","Alert","validate","values","errors","search","length","SearchForm","onSubmit","formik","useFormik","initialValues","handleSubmit","name","type","onChange","handleChange","value","placeholder","size","color","Movies","useSearchParams","searchParams","setSearchParams","useState","setMovies","get","hadleFetchSearch","useCallback","API","response","useEffect","query","q","trim","toLowerCase","base_url","poster_sizes","profile_sizes","forList","data","results","poster_path","forDetails","detailsPlaceholder","year","Date","release_date","getFullYear","userScore","vote_average","Math","floor","overview","genres","genre","join","forCast","cast","actor","photo","profile_path","character","filter","includes","forReviews","review","author","content","movieDB","axios","baseURL","params","api_key","popular","normalize","details","reviews"],"sourceRoot":""}