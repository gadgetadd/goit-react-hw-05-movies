{"version":3,"file":"static/js/472.e77a62a9.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","helpers/normalize.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 20px auto;\n  padding: 0;\n`;\nexport const Item = styled.li`\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px 0px;\n  padding: 10px 0;\n  font-size: 24px;\n\n  margin: 10px auto;\n`;\n\nexport const Name = styled.p`\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  margin: 0;\n  margin-bottom: 10px;\n  font-size: 16px;\n`;\nexport const Content = styled.p`\n  margin: 0;\n  font-size: 18px;\n`;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RxAvatar } from 'react-icons/rx';\nimport API from 'services/api';\nimport { List, Item, Name, Content } from './Reviews.styled';\nimport { Fallback } from 'components/Fallback/Fallback.styled';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const isEmpty = reviews?.length === 0;\n  const isLoaded = reviews !== null;\n\n  const hadleFetchReviews = useCallback(async () => {\n    const response = await API.reviews(movieId);\n    setReviews(response);\n  }, [movieId]);\n\n  useEffect(() => {\n    hadleFetchReviews();\n  }, [hadleFetchReviews]);\n\n  return (\n    <List>\n      {!isLoaded && <Fallback>Loading</Fallback>}\n      {isLoaded && isEmpty && (\n        <Item>Sorry, there is no information about the cast</Item>\n      )}\n      {isLoaded &&\n        !isEmpty &&\n        reviews.map(review => (\n          <Item key={review.id}>\n            <Name>\n              <RxAvatar />\n              {review.author}\n            </Name>\n            <Content>{review.content}</Content>\n          </Item>\n        ))}\n    </List>\n  );\n}\n","import previewPlaceholder from 'images/preview-placeholder.png'\nimport castPlaceholder from 'images/cast-placeholder.jpg'\nimport detailsPlaceholder from 'images/details-placeholder.jpg'\n\nconst base_url = \"https://image.tmdb.org/t/p/\";\n// const backdrop_sizes = ['w300', 'w780', 'w1280', 'original'];\n// const logo_sizes = ['w45', 'w92', 'w154', 'w185', 'w300', 'w500', 'original'];\nconst poster_sizes = ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'];\nconst profile_sizes = ['w45', 'w185', 'h632', 'original'];\n\nconst forList = (data) => data.results.map(movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : previewPlaceholder,\n    id: movie.id,\n}))\n\nconst forDetails = movie => ({\n    title: movie.title,\n    poster: movie.poster_path ? base_url + poster_sizes[3] + movie.poster_path : detailsPlaceholder,\n    year: new Date(movie.release_date).getFullYear(),\n    userScore: movie.vote_average !== 0.0 ? `${Math.floor(movie.vote_average * 10)}%` : 'no ratings yet',\n    overview: movie.overview,\n    genres: movie.genres.map(genre => genre.name).join(', ')\n})\n\nconst forCast = movie => movie.cast.map(actor => ({\n    id: actor.id,\n    photo: actor.profile_path ? base_url + profile_sizes[0] + actor.profile_path : castPlaceholder,\n    name: actor.name,\n    character: actor.character,\n})).filter(actor => !actor.character.includes('uncredited'))\n\nconst forReviews = data => data.results.map(review => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n}))\n\n\nconst normalize = { forList, forDetails, forCast, forReviews };\n\nexport default normalize;","import axios from \"axios\"\nimport normalize from \"helpers/normalize\";\n\n\nconst movieDB = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: { api_key: '2b43cfeb8fadffb304d7dda7b2d5a230' }\n});\n\nconst popular = async () => {\n    const response = await movieDB.get('trending/movie/week');\n    return normalize.forList(response.data);\n};\n\nconst search = async (query) => {\n    const response = await movieDB.get('search/movie', { params: { query } });\n    return normalize.forList(response.data);\n};\n\nconst details = async (id) => {\n    const response = await movieDB.get(`movie/${id}`);\n    return normalize.forDetails(response.data);\n};\n\nconst cast = async (id) => {\n    const response = await movieDB.get(`movie/${id}/credits`);\n    return normalize.forCast(response.data);\n};\n\nconst reviews = async (id) => {\n    const response = await movieDB.get(`movie/${id}/reviews`);\n    return normalize.forReviews(response.data);\n};\n\nconst API = {\n    popular, search, details, cast, reviews\n}\n\nexport default API;\n"],"names":["List","styled","Item","Name","Content","Reviews","movieId","useParams","useState","reviews","setReviews","isEmpty","length","isLoaded","hadleFetchReviews","useCallback","API","response","useEffect","map","review","author","content","id","base_url","poster_sizes","profile_sizes","forList","data","results","movie","title","poster","poster_path","forDetails","detailsPlaceholder","year","Date","release_date","getFullYear","userScore","vote_average","Math","floor","overview","genres","genre","name","join","forCast","cast","actor","photo","profile_path","character","filter","includes","forReviews","movieDB","axios","baseURL","params","api_key","popular","get","normalize","search","query","details"],"sourceRoot":""}